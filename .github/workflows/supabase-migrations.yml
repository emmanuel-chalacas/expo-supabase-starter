name: Supabase Migrations

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  migrate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - uses: supabase/setup-cli@v1

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Login and link
        shell: bash
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF }}
        run: |
          set -e
          supabase login --token "${SUPABASE_ACCESS_TOKEN}"
          supabase link --project-ref "${SUPABASE_PROJECT_REF}"

      - name: Preflight duplicate projects (tenant_id, stage_application)
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          node scripts/run-sql.js -e "do $do$
          begin
            if exists (
              select 1
              from public.projects
              group by tenant_id, stage_application
              having count(*) > 1
            ) then
              raise exception 'Duplicate projects for (tenant_id, stage_application) found';
            end if;
          end
          $do$ language plpgsql;"

      - name: Preflight RM directory normalized uniqueness
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          node scripts/run-sql.js -e "do $do$
          declare v_has_active boolean;
          begin
            select exists (
              select 1 from information_schema.columns
              where table_schema='public' and table_name='rm_directory' and column_name='active'
            ) into v_has_active;

            if v_has_active then
              if exists (
                select 1
                from public.rm_directory r
                where r.active is true
                group by coalesce(
                  r.normalized_display_name,
                  lower(regexp_replace(btrim(r.display_name), '\s+', ' ', 'g'))
                )
                having count(*) > 1
              ) then
                raise exception 'Duplicate active RM normalized_display_name detected';
              end if;
            else
              if exists (
                select 1
                from public.rm_directory r
                where r.status = 'active'
                group by coalesce(
                  r.normalized_display_name,
                  lower(regexp_replace(btrim(r.display_name), '\s+', ' ', 'g'))
                )
                having count(*) > 1
              ) then
                raise exception 'Duplicate active RM normalized_display_name detected';
              end if;
            end if;
          end
          $do$ language plpgsql;"

      - name: Push migrations
        run: supabase db push

      - name: Remote verify via runner
        shell: bash
        env:
          # Provide one of the following:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}           # Preferred: full Postgres URL (sslmode=require enforced if missing)
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }} # Fallback: postgres password used with project_id from supabase/config.toml
        run: yarn db:remote:verify

      - name: Remote Stage 3 verify
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: yarn db:remote:verify:stage3

      - name: Remote Stage 3 policy tests
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: yarn db:remote:test:stage3
      - name: Remote Stage 4 verify
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: yarn db:remote:verify:stage4

      - name: Remote Stage 4 smoke tests
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: yarn db:remote:test:stage4

      - name: Remote Stage 5 verify
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: yarn db:remote:verify:stage5

      - name: Remote Stage 5 smoke tests
        shell: bash
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: yarn db:remote:test:stage5